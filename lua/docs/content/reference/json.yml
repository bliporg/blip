keywords: ["cubzh", "game", "mobile", "scripting", "cube", "voxel", "world", "json"]
type: "JSON"

creatable: false
description: |
    [JSON] allows you to encode a Lua table into a JSON string and decode a JSON string into a Lua table.

functions:
    - name: "Encode"
      description: |
          Takes a Lua table as parameter and returns a json encoded string.
          This function handles basic types (number, string, boolean, tables) and skips functions.
      argument-sets:
        -
          - name: "data"
            type: "table"
      return:
        - type: "string"
      samples:
          - code: |
              local playerInfo = {}
              playerInfo.hp = 100
              playerInfo.name = "Bob"
              local encoded = JSON:Encode(playerInfo)
              print(encoded)
              -- prints the string {"hp":100,"name":"Bob"}

    - name: "Decode"
      description: |
          Decode takes a json string as parameter and returns a Lua table.
          It also returns an error ([string]) when the provided string can't be decoded.
      argument-sets:
        -
          - name: "encodedString"
            type: "string"
      return:
        - type: "table"
        - type: "string"
      samples:
          - code: |
              local jsonstring = "{\"body\":\"Test message\",\"status_code\":200}"
              local data = JSON:Decode(jsonstring)
              print(data.body, "- status:", data.status_code)
              -- prints "Test message - status: 200"

              -- error handling:
              local jsonstring = "{\"body\":\"Test message\",\"status_code\":200" -- missing '}' at the end
              local data, err = JSON:Decode(jsonstring)
              if err ~= nil then
                print("could not decode jsonstring, error:", err)
              end

keywords: ["blip", "lua", "luau", "server", "backend", "networking", "multiplayer", "host", "database", "connection"]
type: "Server"
description: |
  The `Server` acts as a host and director for the game.

  For example, if your game requires a minimum amount of players, it's a good idea to use the [Server] to count and trigger game start.

properties:
  - name: "DidReceiveEvent"
    type: "function"
    description: |
      Executed when the [This] receives an [Event] from a game client. Provides the received [Event] as parameter.
    samples:
      - code: |
          -- executed ~30 times per second on each user device
          Server.DidReceiveEvent = function(event)
            print("event received:", event)
          end

  - name: "OnPlayerJoin"
    type: "function"
    description: |
        Executed when a [Player] joins the Server.
    samples:
      - code: |
          Server.OnPlayerJoin = function(newPlayer)
            print("Welcome", newPlayer.Username)
          end

  - name: "OnPlayerLeave"
    type: "function"
    description: |
        Executed when a [Player] leaves the Server.
    samples:
      - code: |
          Server.OnPlayerLeave = function(leavingPlayer)
            print(leavingPlayer.Username, "has left")
          end

  - name: "OnStart"
    type: "function"
    description: |
        Executed when the Server starts.
    samples:
      - code: |
          Server.OnStart = function()
            -- initialize Server
            scores = {} -- Server-only variable
            for i = 0, 15 do 
              scores[i] = 0
            end
          end

  - name: "Tick"
    type: "function"
    description: |
        Executed ~30 times per second. Provides the elapsed time in seconds as parameter.
    samples:
      - code: |
          -- executed ~30 times per second on each user device
          Server.Tick = function(dt)
            print("elapsed:", dt, "seconds")
          end

keywords: ["blip", "lua", "luau", "key value store", "database", "storage", "persistence", "dictionary", "data", "cache"]
type: "KeyValueStore"
description: |
    [KeyValueStore]s can be used to store and retrieve user data.

blocks:
    - text: |
        [KeyValueStore]s can be used to store and retrieve user data.

        You can use several [KeyValueStore]s, they will all be scoped to your [World].

        For example, you can use a [Player.UserID] to store data that belongs to a one [Player]:

    - code: |
        Server.DidReceiveEvent = function(event)
          
          if event.action == "getXP" then

            -- retrieve and return player's experience:
            local store = KeyValueStore(event.Sender.UserID) -- use UserID as store name

            -- get value for "xp" key
            store:Get("xp", function(success, results)
                if success then
                  local response = Event()
                  response.xp = results.xp
                  response:SendTo(event.Sender)
                end
            end)
          end
        end

    - text: |

        ⚠️ Currently, [KeyValueStore]s can only be used by the [Server]. You will need to use [Event]s to ask the [Server] to store and retrieve data. It's a bit cumbersome, but it will be possible to use this from [Client]s too real soon.

        ⚠️ It's possible to save high scores (sorted data) using a [KeyValueStore], but [SortedSets] (coming soon) will be a better option for this.
    
constructors:
  - description: |
      Creates a [KeyValueStore] with given store name.

      Several stores can be used in one single [World], it's useful to scope your data.
    arguments:
    - name: storeName
      type: string
    samples:
      - code: |
          local store = KeyValueStore("settings")
          store:Get("currentChallenge", "jumpStrength", function(success, results)
              if success then
                -- do something with results.currentChallenge
                -- and results.jumpStrength
              end
          end)

properties:
  - name: "Name"
    read-only: true
    types:
        - "string"
    description: |
        [KeyValueStore]'s name.
    
functions:
  - name: "Set"
    argument-sets: 
      -
        - name: "key1"
          type: "string"
        - name: "value"
          type: "string"
        - name: "... " # current way to indicate variadic arguments
          type: "" # leaving type empty on purpose"
        - name: "callback"
          type: "function"
          optional: true
      -
        - name: "key1"
          type: "string"
        - name: "value"
          type: "number"
        - name: "... " # current way to indicate variadic arguments
          type: "" # leaving type empty on purpose"
        - name: "callback"
          type: "function"
          optional: true
      -
        - name: "key1"
          type: "string"
        - name: "value"
          type: "boolean"
        - name: "... " # current way to indicate variadic arguments
          type: "" # leaving type empty on purpose"
        - name: "callback"
          type: "function"
          optional: true
    description: |
        Sets values for given keys.

        Currently, values can be [string]s, [number]s or [boolean]s. More types are going to be supported soon.

        Though the operation is supposed to be real quick, it can't be instantaneous. That's why you need to supply a callback function to get the response.

        The callback function only takes one argument:
        - a [boolean], indicating if the operation was successful (it could fail because of network issues).
    samples:
      - code: |
          local store = KeyValueStore("settings")
          store:Set("currentChallenge", "halloween", "jumpStrength", 10, function(success)
              if success then
                -- operation was successful
              end
          end)

  - name: "Get"
    argument-sets: 
      -
        - name: "key1"
          type: "string"
        - name: "key2"
          type: "string"
        - name: "... " # current way to indicate variadic arguments
          type: "" # leaving type empty on purpose
        - name: "callback"
          type: "function"
    description: |
        Gets values for given keys.

        Though the operation is supposed to be real quick, it can't be instantaneous. That's why you need to supply a callback function to get the response.

        The callback function only takes 2 arguments: 
        - A [boolean], indicating if the operation was successful (it could fail because of network issues).
        - A [table] containing values for requested keys.

    samples:
      - code: |
          local store = KeyValueStore("settings")
          store:Get("currentChallenge", "jumpStrength", function(success, results)
              if success then
                -- do something with results.currentChallenge
                -- and results.jumpStrength
              end
          end)


          



